generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider              = "prisma-dbml-generator"
  projectDatabaseType   = "PostgreSQL"
  includeRelationFields = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  username     String  @unique
  password     String
  refreshToken String? @map("refresh_token")
  role         Role    @default(USER)

  createdRooms Room[]
  inRooms      UsersInRooms[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

// a User in a Room
// list all parties where a User is currently playing or has played
model UsersInRooms {
  user     User     @relation(fields: [userId], references: [id])
  userId   Int      @map("user_id")
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId   Int      @map("room_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  @@id([userId, roomId])
  @@map("users_in_rooms")
}

// a Room is where the players go and it contains a game
// It has a code for User to share
model Room {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  code     String    @unique // length = 10 characters
  name     String
  isPublic Boolean   @map("is_public")
  state    RoomState

  game      Game @relation(fields: [gameId], references: [id])
  gameId    Int  @map("game_id")
  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int  @map("creator_id")

  users UsersInRooms[]

  @@map("rooms")
}

enum RoomState {
  WAITING
  IN_PROGRESS
  FINISHED
}

// a Game contains it's config, data and game_definition
model Game {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  definition     GameDefinition @relation(fields: [definitionSlug], references: [slug])
  definitionSlug String         @map("definition_slug")
  config         Json
  data           Json

  Room Room[]

  @@map("games")
}

// Definition of a game
// List of possible games:
//  - Tusmo / Motus
//  - Bombparty...
model GameDefinition {
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  slug        String  @unique
  name        String
  logo        String @default("üïπÔ∏è") // emote or from icones.js.org
  description String @default("")
  enabled     Boolean @default(false)
  color     String  @default("#fff") @map("color")

  Game Game[]

  @@map("game_definitions")
}
